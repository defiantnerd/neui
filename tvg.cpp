#include "tvg.h"
#include <iostream>

// array size is 1447
static const uint8_t everything[] = {
  0x72, 0x56, 0x01, 0x05, 0x90, 0x01, 0x00, 0x03, 0x06, 0xe7, 0xa9, 0x15, 0xff, 0xff, 0x78, 0x00,
  0xff, 0x40, 0xff, 0x00, 0xff, 0xba, 0x00, 0x4d, 0xff, 0x62, 0x00, 0x9e, 0xff, 0x94, 0xe5, 0x38,
  0xff, 0x02, 0x02, 0x00, 0x20, 0x03, 0x20, 0x03, 0x80, 0x0c, 0xe0, 0x01, 0x20, 0x03, 0xa0, 0x05,
  0x80, 0x0c, 0xe0, 0x01, 0x20, 0x03, 0x20, 0x08, 0x80, 0x0c, 0xe0, 0x01, 0x09, 0x02, 0x00, 0x03,
  0x50, 0x00, 0x20, 0x03, 0x20, 0x0d, 0x80, 0x0c, 0xe0, 0x01, 0x20, 0x03, 0xa0, 0x0f, 0x80, 0x0c,
  0xe0, 0x01, 0x20, 0x03, 0x20, 0x12, 0x80, 0x0c, 0xe0, 0x01, 0x04, 0x03, 0x00, 0x50, 0x00, 0x20,
  0x03, 0x20, 0x17, 0xa0, 0x0f, 0x60, 0x18, 0x20, 0x03, 0x60, 0x18, 0xa0, 0x0f, 0xa0, 0x19, 0x20,
  0x03, 0xa0, 0x19, 0xa0, 0x0f, 0xe0, 0x1a, 0x20, 0x03, 0xe0, 0x1a, 0xa0, 0x0f, 0x20, 0x1c, 0x05,
  0x04, 0x00, 0x50, 0x00, 0x20, 0x03, 0x40, 0x1f, 0xa0, 0x0f, 0x80, 0x20, 0x60, 0x04, 0xc0, 0x21,
  0xa0, 0x0f, 0x00, 0x23, 0x20, 0x03, 0x40, 0x24, 0x06, 0x04, 0x00, 0x50, 0x00, 0x20, 0x03, 0x60,
  0x27, 0xa0, 0x0f, 0xa0, 0x28, 0x60, 0x04, 0xe0, 0x29, 0xa0, 0x0f, 0x20, 0x2b, 0x20, 0x03, 0x60,
  0x2c, 0x01, 0x04, 0x00, 0x20, 0x03, 0x80, 0x2f, 0xa0, 0x0f, 0xc0, 0x30, 0x60, 0x04, 0x00, 0x32,
  0xa0, 0x0f, 0x40, 0x33, 0x20, 0x03, 0x80, 0x34, 0x08, 0x04, 0x00, 0x03, 0x50, 0x00, 0x20, 0x03,
  0xa0, 0x37, 0xa0, 0x0f, 0xe0, 0x38, 0x60, 0x04, 0x20, 0x3a, 0xa0, 0x0f, 0x60, 0x3b, 0x20, 0x03,
  0xa0, 0x3c, 0x07, 0x00, 0x00, 0x70, 0x00, 0x08, 0x20, 0x03, 0xc0, 0x3f, 0x11, 0x70, 0x00, 0x60,
  0x04, 0x12, 0x70, 0x00, 0x00, 0x41, 0x11, 0x70, 0x00, 0xa0, 0x05, 0x10, 0x30, 0x00, 0xa0, 0x0f,
  0xc0, 0x3f, 0x13, 0x50, 0x00, 0x80, 0x0c, 0x40, 0x42, 0x60, 0x0e, 0x00, 0x46, 0x80, 0x0c, 0x00,
  0x46, 0x17, 0x90, 0x00, 0x60, 0x09, 0x00, 0x46, 0x60, 0x09, 0xe0, 0x42, 0x15, 0x50, 0x00, 0x02,
  0x60, 0x04, 0x40, 0x06, 0x30, 0x00, 0x40, 0x06, 0x20, 0x44, 0x14, 0x30, 0x00, 0x00, 0xc0, 0x01,
  0x20, 0x03, 0xe0, 0x42, 0x16, 0x70, 0x00, 0x03, 0x00, 0x00, 0x08, 0x20, 0x03, 0x20, 0x49, 0x01,
  0x60, 0x04, 0x02, 0x60, 0x4a, 0x01, 0xa0, 0x05, 0x00, 0xa0, 0x0f, 0x20, 0x49, 0x03, 0x80, 0x0c,
  0xa0, 0x4b, 0x60, 0x0e, 0x60, 0x4f, 0x80, 0x0c, 0x60, 0x4f, 0x07, 0x60, 0x09, 0x60, 0x4f, 0x60,
  0x09, 0x40, 0x4c, 0x05, 0x02, 0x60, 0x04, 0x40, 0x06, 0x30, 0x00, 0x40, 0x06, 0x80, 0x4d, 0x04,
  0x00, 0xc0, 0x01, 0x20, 0x03, 0x40, 0x4c, 0x06, 0x0a, 0x00, 0x00, 0x03, 0x50, 0x00, 0x08, 0x20,
  0x03, 0x80, 0x52, 0x01, 0x60, 0x04, 0x02, 0xc0, 0x53, 0x01, 0xa0, 0x05, 0x00, 0xa0, 0x0f, 0x80,
  0x52, 0x03, 0x80, 0x0c, 0x00, 0x55, 0x60, 0x0e, 0xc0, 0x58, 0x80, 0x0c, 0xc0, 0x58, 0x07, 0x60,
  0x09, 0xc0, 0x58, 0x60, 0x09, 0xa0, 0x55, 0x05, 0x02, 0x60, 0x04, 0x40, 0x06, 0x30, 0x00, 0x40,
  0x06, 0xe0, 0x56, 0x04, 0x00, 0xc0, 0x01, 0x20, 0x03, 0xa0, 0x55, 0x06, 0x42, 0x02, 0xc0, 0x12,
  0x20, 0x03, 0x40, 0x1f, 0x60, 0x09, 0x01, 0x02, 0xc0, 0x12, 0x20, 0x03, 0x80, 0x0c, 0xe0, 0x01,
  0xc0, 0x12, 0xa0, 0x05, 0x80, 0x0c, 0xe0, 0x01, 0xc0, 0x12, 0x20, 0x08, 0x80, 0x0c, 0xe0, 0x01,
  0x49, 0x02, 0xc0, 0x12, 0x20, 0x0d, 0x40, 0x1f, 0x60, 0x13, 0x01, 0x02, 0x03, 0x50, 0x00, 0xc0,
  0x12, 0x20, 0x0d, 0x80, 0x0c, 0xe0, 0x01, 0xc0, 0x12, 0xa0, 0x0f, 0x80, 0x0c, 0xe0, 0x01, 0xc0,
  0x12, 0x20, 0x12, 0x80, 0x0c, 0xe0, 0x01, 0x44, 0x03, 0xc0, 0x12, 0x20, 0x17, 0x40, 0x1f, 0x60,
  0x1d, 0x01, 0x02, 0x50, 0x00, 0xc0, 0x12, 0x20, 0x17, 0x40, 0x1f, 0x60, 0x18, 0xc0, 0x12, 0x60,
  0x18, 0x40, 0x1f, 0xa0, 0x19, 0xc0, 0x12, 0xa0, 0x19, 0x40, 0x1f, 0xe0, 0x1a, 0xc0, 0x12, 0xe0,
  0x1a, 0x40, 0x1f, 0x20, 0x1c, 0x45, 0x04, 0xc0, 0x12, 0x40, 0x1f, 0x40, 0x1f, 0x80, 0x25, 0x01,
  0x02, 0x50, 0x00, 0xc0, 0x12, 0x40, 0x1f, 0x40, 0x1f, 0x80, 0x20, 0x00, 0x14, 0xc0, 0x21, 0x40,
  0x1f, 0x00, 0x23, 0xc0, 0x12, 0x40, 0x24, 0x46, 0x04, 0xc0, 0x12, 0x60, 0x27, 0x40, 0x1f, 0xa0,
  0x2d, 0x01, 0x02, 0x50, 0x00, 0xc0, 0x12, 0x60, 0x27, 0x40, 0x1f, 0xa0, 0x28, 0x00, 0x14, 0xe0,
  0x29, 0x40, 0x1f, 0x20, 0x2b, 0xc0, 0x12, 0x60, 0x2c, 0x41, 0x04, 0xc0, 0x12, 0x80, 0x2f, 0x40,
  0x1f, 0xc0, 0x35, 0x01, 0x02, 0xc0, 0x12, 0x80, 0x2f, 0x40, 0x1f, 0xc0, 0x30, 0x00, 0x14, 0x00,
  0x32, 0x40, 0x1f, 0x40, 0x33, 0xc0, 0x12, 0x80, 0x34, 0x48, 0x04, 0xc0, 0x12, 0xa0, 0x37, 0x40,
  0x1f, 0xe0, 0x3d, 0x01, 0x02, 0x03, 0x50, 0x00, 0xc0, 0x12, 0xa0, 0x37, 0x40, 0x1f, 0xe0, 0x38,
  0x00, 0x14, 0x20, 0x3a, 0x40, 0x1f, 0x60, 0x3b, 0xc0, 0x12, 0xa0, 0x3c, 0x47, 0x00, 0xc0, 0x12,
  0xc0, 0x3f, 0x40, 0x1f, 0x00, 0x46, 0x01, 0x02, 0x70, 0x00, 0x08, 0xc0, 0x12, 0xc0, 0x3f, 0x11,
  0x70, 0x00, 0x00, 0x14, 0x12, 0x70, 0x00, 0x00, 0x41, 0x11, 0x70, 0x00, 0x40, 0x15, 0x10, 0x30,
  0x00, 0x40, 0x1f, 0xc0, 0x3f, 0x13, 0x50, 0x00, 0x20, 0x1c, 0x40, 0x42, 0x00, 0x1e, 0x00, 0x46,
  0x20, 0x1c, 0x00, 0x46, 0x17, 0x90, 0x00, 0x00, 0x19, 0x00, 0x46, 0x00, 0x19, 0xe0, 0x42, 0x15,
  0x50, 0x00, 0x02, 0x60, 0x04, 0x40, 0x06, 0x30, 0x00, 0xe0, 0x15, 0x20, 0x44, 0x14, 0x30, 0x00,
  0x00, 0xc0, 0x01, 0xc0, 0x12, 0xe0, 0x42, 0x16, 0x70, 0x00, 0x43, 0x00, 0xc0, 0x12, 0x20, 0x49,
  0x40, 0x1f, 0x60, 0x4f, 0x01, 0x02, 0x08, 0xc0, 0x12, 0x20, 0x49, 0x01, 0x00, 0x14, 0x02, 0x60,
  0x4a, 0x01, 0x40, 0x15, 0x00, 0x40, 0x1f, 0x20, 0x49, 0x03, 0x20, 0x1c, 0xa0, 0x4b, 0x00, 0x1e,
  0x60, 0x4f, 0x20, 0x1c, 0x60, 0x4f, 0x07, 0x00, 0x19, 0x60, 0x4f, 0x00, 0x19, 0x40, 0x4c, 0x05,
  0x02, 0x60, 0x04, 0x40, 0x06, 0x30, 0x00, 0xe0, 0x15, 0x80, 0x4d, 0x04, 0x00, 0xc0, 0x01, 0xc0,
  0x12, 0x40, 0x4c, 0x06, 0x4a, 0x00, 0xc0, 0x12, 0x80, 0x52, 0x40, 0x1f, 0xc0, 0x58, 0x01, 0x02,
  0x03, 0x50, 0x00, 0x08, 0xc0, 0x12, 0x80, 0x52, 0x01, 0x00, 0x14, 0x02, 0xc0, 0x53, 0x01, 0x40,
  0x15, 0x00, 0x40, 0x1f, 0x80, 0x52, 0x03, 0x20, 0x1c, 0x00, 0x55, 0x00, 0x1e, 0xc0, 0x58, 0x20,
  0x1c, 0xc0, 0x58, 0x07, 0x00, 0x19, 0xc0, 0x58, 0x00, 0x19, 0xa0, 0x55, 0x05, 0x02, 0x60, 0x04,
  0x40, 0x06, 0x30, 0x00, 0xe0, 0x15, 0xe0, 0x56, 0x04, 0x00, 0xc0, 0x01, 0xc0, 0x12, 0xa0, 0x55,
  0x06, 0x82, 0x02, 0xa0, 0x28, 0x40, 0x06, 0xe0, 0x2e, 0x60, 0x09, 0x01, 0x02, 0x60, 0x22, 0x20,
  0x03, 0x80, 0x0c, 0xe0, 0x01, 0x60, 0x22, 0xa0, 0x05, 0x80, 0x0c, 0xe0, 0x01, 0x60, 0x22, 0x20,
  0x08, 0x80, 0x0c, 0xe0, 0x01, 0x89, 0x02, 0xa0, 0x28, 0x40, 0x10, 0xe0, 0x2e, 0x60, 0x13, 0x01,
  0x02, 0x03, 0x50, 0x00, 0x60, 0x22, 0x20, 0x0d, 0x80, 0x0c, 0xe0, 0x01, 0x60, 0x22, 0xa0, 0x0f,
  0x80, 0x0c, 0xe0, 0x01, 0x60, 0x22, 0x20, 0x12, 0x80, 0x0c, 0xe0, 0x01, 0x84, 0x03, 0xa0, 0x28,
  0x40, 0x1a, 0xe0, 0x2e, 0x60, 0x1d, 0x01, 0x02, 0x50, 0x00, 0x60, 0x22, 0x20, 0x17, 0xe0, 0x2e,
  0x60, 0x18, 0x60, 0x22, 0x60, 0x18, 0xe0, 0x2e, 0xa0, 0x19, 0x60, 0x22, 0xa0, 0x19, 0xe0, 0x2e,
  0xe0, 0x1a, 0x60, 0x22, 0xe0, 0x1a, 0xe0, 0x2e, 0x20, 0x1c, 0x85, 0x04, 0xa0, 0x28, 0x60, 0x22,
  0xe0, 0x2e, 0x80, 0x25, 0x01, 0x02, 0x50, 0x00, 0x60, 0x22, 0x40, 0x1f, 0xe0, 0x2e, 0x80, 0x20,
  0xa0, 0x23, 0xc0, 0x21, 0xe0, 0x2e, 0x00, 0x23, 0x60, 0x22, 0x40, 0x24, 0x86, 0x04, 0xa0, 0x28,
  0x80, 0x2a, 0xe0, 0x2e, 0xa0, 0x2d, 0x01, 0x02, 0x50, 0x00, 0x60, 0x22, 0x60, 0x27, 0xe0, 0x2e,
  0xa0, 0x28, 0xa0, 0x23, 0xe0, 0x29, 0xe0, 0x2e, 0x20, 0x2b, 0x60, 0x22, 0x60, 0x2c, 0x81, 0x04,
  0xa0, 0x28, 0xa0, 0x32, 0xe0, 0x2e, 0xc0, 0x35, 0x01, 0x02, 0x60, 0x22, 0x80, 0x2f, 0xe0, 0x2e,
  0xc0, 0x30, 0xa0, 0x23, 0x00, 0x32, 0xe0, 0x2e, 0x40, 0x33, 0x60, 0x22, 0x80, 0x34, 0x88, 0x04,
  0xa0, 0x28, 0xc0, 0x3a, 0xe0, 0x2e, 0xe0, 0x3d, 0x01, 0x02, 0x03, 0x50, 0x00, 0x60, 0x22, 0xa0,
  0x37, 0xe0, 0x2e, 0xe0, 0x38, 0xa0, 0x23, 0x20, 0x3a, 0xe0, 0x2e, 0x60, 0x3b, 0x60, 0x22, 0xa0,
  0x3c, 0x87, 0x00, 0xa0, 0x28, 0xe0, 0x42, 0xe0, 0x2e, 0x00, 0x46, 0x01, 0x02, 0x70, 0x00, 0x08,
  0x60, 0x22, 0xc0, 0x3f, 0x11, 0x70, 0x00, 0xa0, 0x23, 0x12, 0x70, 0x00, 0x00, 0x41, 0x11, 0x70,
  0x00, 0xe0, 0x24, 0x10, 0x30, 0x00, 0xe0, 0x2e, 0xc0, 0x3f, 0x13, 0x50, 0x00, 0xc0, 0x2b, 0x40,
  0x42, 0xa0, 0x2d, 0x00, 0x46, 0xc0, 0x2b, 0x00, 0x46, 0x17, 0x90, 0x00, 0xa0, 0x28, 0x00, 0x46,
  0xa0, 0x28, 0xe0, 0x42, 0x15, 0x50, 0x00, 0x02, 0x60, 0x04, 0x40, 0x06, 0x30, 0x00, 0x80, 0x25,
  0x20, 0x44, 0x14, 0x30, 0x00, 0x00, 0xc0, 0x01, 0x60, 0x22, 0xe0, 0x42, 0x16, 0x70, 0x00, 0x83,
  0x00, 0xa0, 0x28, 0x40, 0x4c, 0xe0, 0x2e, 0x60, 0x4f, 0x01, 0x02, 0x08, 0x60, 0x22, 0x20, 0x49,
  0x01, 0xa0, 0x23, 0x02, 0x60, 0x4a, 0x01, 0xe0, 0x24, 0x00, 0xe0, 0x2e, 0x20, 0x49, 0x03, 0xc0,
  0x2b, 0xa0, 0x4b, 0xa0, 0x2d, 0x60, 0x4f, 0xc0, 0x2b, 0x60, 0x4f, 0x07, 0xa0, 0x28, 0x60, 0x4f,
  0xa0, 0x28, 0x40, 0x4c, 0x05, 0x02, 0x60, 0x04, 0x40, 0x06, 0x30, 0x00, 0x80, 0x25, 0x80, 0x4d,
  0x04, 0x00, 0xc0, 0x01, 0x60, 0x22, 0x40, 0x4c, 0x06, 0x8a, 0x00, 0xa0, 0x28, 0xa0, 0x55, 0xe0,
  0x2e, 0xc0, 0x58, 0x01, 0x02, 0x03, 0x50, 0x00, 0x08, 0x60, 0x22, 0x80, 0x52, 0x01, 0xa0, 0x23,
  0x02, 0xc0, 0x53, 0x01, 0xe0, 0x24, 0x00, 0xe0, 0x2e, 0x80, 0x52, 0x03, 0xc0, 0x2b, 0x00, 0x55,
  0xa0, 0x2d, 0xc0, 0x58, 0xc0, 0x2b, 0xc0, 0x58, 0x07, 0xa0, 0x28, 0xc0, 0x58, 0xa0, 0x28, 0xa0,
  0x55, 0x05, 0x02, 0x60, 0x04, 0x40, 0x06, 0x30, 0x00, 0x80, 0x25, 0xe0, 0x56, 0x04, 0x00, 0xc0,
  0x01, 0x60, 0x22, 0xa0, 0x55, 0x06, 0x00
};

// array size is 927
static const uint8_t app_icon[] = {
  0x72, 0x56, 0x01, 0x09, 0x30, 0x00, 0x30, 0x00, 0x06, 0x00, 0x00, 0x00, 0x33, 0x5d, 0x39, 0x9b,
  0xff, 0xe4, 0xe4, 0xe4, 0xff, 0x7e, 0x57, 0xc2, 0xff, 0xff, 0xff, 0xff, 0x19, 0x2c, 0x1e, 0x44,
  0xff, 0x03, 0x00, 0x00, 0x07, 0x00, 0x0c, 0x00, 0x22, 0x01, 0x00, 0x54, 0x03, 0x00, 0x56, 0x00,
  0x22, 0x00, 0x58, 0x00, 0x22, 0x00, 0x58, 0x00, 0x26, 0x02, 0x00, 0x52, 0x03, 0x00, 0x58, 0x00,
  0x56, 0x00, 0x54, 0x00, 0x56, 0x00, 0x54, 0x00, 0x56, 0x01, 0x00, 0x0c, 0x03, 0x00, 0x0a, 0x00,
  0x56, 0x00, 0x08, 0x00, 0x56, 0x00, 0x08, 0x00, 0x52, 0x02, 0x00, 0x26, 0x03, 0x00, 0x08, 0x00,
  0x22, 0x00, 0x0a, 0x00, 0x22, 0x00, 0x0c, 0x00, 0x22, 0x03, 0x00, 0x01, 0x08, 0x00, 0x08, 0x00,
  0x44, 0x03, 0x00, 0x08, 0x37, 0x46, 0xc9, 0x09, 0x00, 0x48, 0x00, 0x0c, 0x00, 0x48, 0x01, 0x00,
  0x54, 0x03, 0x37, 0x56, 0x00, 0x48, 0x00, 0x58, 0x37, 0x46, 0x00, 0x58, 0x00, 0x44, 0x02, 0x00,
  0x18, 0x03, 0x00, 0x58, 0xc9, 0x15, 0x37, 0x56, 0x00, 0x14, 0x00, 0x54, 0x00, 0x14, 0x01, 0x00,
  0x30, 0x03, 0x00, 0x2a, 0x00, 0x14, 0x00, 0x28, 0x00, 0x0c, 0x00, 0x22, 0x00, 0x0c, 0x01, 0x00,
  0x0c, 0x03, 0xc9, 0x09, 0x00, 0x0c, 0x00, 0x08, 0xc9, 0x0d, 0x00, 0x08, 0x00, 0x10, 0x03, 0x00,
  0x00, 0x07, 0x00, 0x0c, 0x00, 0x1e, 0x01, 0x00, 0x54, 0x03, 0x00, 0x56, 0x00, 0x1e, 0x00, 0x58,
  0x00, 0x1e, 0x00, 0x58, 0x00, 0x22, 0x02, 0x00, 0x4e, 0x03, 0x00, 0x58, 0x00, 0x52, 0x00, 0x54,
  0x00, 0x52, 0x00, 0x54, 0x00, 0x52, 0x01, 0x00, 0x0c, 0x03, 0x00, 0x0a, 0x00, 0x52, 0x00, 0x08,
  0x00, 0x52, 0x00, 0x08, 0x00, 0x4e, 0x02, 0x00, 0x22, 0x03, 0x00, 0x08, 0x00, 0x1e, 0x00, 0x0a,
  0x00, 0x1e, 0x00, 0x0c, 0x00, 0x1e, 0x03, 0x00, 0x02, 0x07, 0x00, 0x10, 0x00, 0x1a, 0x01, 0x00,
  0x50, 0x03, 0x00, 0x52, 0x00, 0x1a, 0x00, 0x54, 0x00, 0x1a, 0x00, 0x54, 0x00, 0x1e, 0x02, 0x00,
  0x36, 0x03, 0x00, 0x54, 0x00, 0x3a, 0x00, 0x50, 0x00, 0x3a, 0x00, 0x50, 0x00, 0x3a, 0x01, 0x00,
  0x10, 0x03, 0x00, 0x0e, 0x00, 0x3a, 0x00, 0x0c, 0x00, 0x3a, 0x00, 0x0c, 0x00, 0x36, 0x02, 0x00,
  0x1e, 0x03, 0x00, 0x0c, 0x00, 0x1a, 0x00, 0x0e, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x1a, 0x03, 0x00,
  0x03, 0x07, 0x00, 0x0c, 0x00, 0x20, 0x01, 0x00, 0x54, 0x03, 0x00, 0x56, 0x00, 0x20, 0x00, 0x58,
  0x00, 0x20, 0x00, 0x58, 0x00, 0x24, 0x02, 0x00, 0x50, 0x03, 0x00, 0x58, 0x00, 0x54, 0x00, 0x54,
  0x00, 0x54, 0x00, 0x54, 0x00, 0x54, 0x01, 0x00, 0x0c, 0x03, 0x00, 0x0a, 0x00, 0x54, 0x00, 0x08,
  0x00, 0x54, 0x00, 0x08, 0x00, 0x50, 0x02, 0x00, 0x24, 0x03, 0x00, 0x08, 0x00, 0x20, 0x00, 0x0a,
  0x00, 0x20, 0x00, 0x0c, 0x00, 0x20, 0x03, 0x00, 0x04, 0x0b, 0x00, 0x0c, 0x00, 0x0c, 0x03, 0xc9,
  0x09, 0x00, 0x0c, 0x00, 0x08, 0xc9, 0x0d, 0x00, 0x08, 0x00, 0x10, 0x02, 0x00, 0x12, 0x03, 0x00,
  0x08, 0xc9, 0x0f, 0xc9, 0x09, 0x00, 0x0e, 0x00, 0x0c, 0x00, 0x0e, 0x01, 0x00, 0x22, 0x03, 0x00,
  0x28, 0x00, 0x0e, 0x00, 0x2a, 0x00, 0x16, 0x00, 0x30, 0x00, 0x16, 0x01, 0x00, 0x54, 0x03, 0x37,
  0x56, 0x00, 0x16, 0x00, 0x58, 0xc9, 0x17, 0x00, 0x58, 0x00, 0x1a, 0x02, 0x00, 0x18, 0x03, 0x00,
  0x58, 0xc9, 0x15, 0x37, 0x56, 0x00, 0x14, 0x00, 0x54, 0x00, 0x14, 0x01, 0x00, 0x30, 0x03, 0x00,
  0x2a, 0x00, 0x14, 0x00, 0x28, 0x00, 0x0c, 0x00, 0x22, 0x00, 0x0c, 0x06, 0x03, 0x05, 0x05, 0x0f,
  0x0b, 0x03, 0x03, 0x03, 0x03, 0x8f, 0x27, 0x01, 0x2e, 0x03, 0x14, 0x27, 0x01, 0x2e, 0x85, 0x26,
  0x25, 0x2e, 0xf1, 0x25, 0x72, 0x2e, 0x03, 0xe1, 0x23, 0x8c, 0x2f, 0xf6, 0x21, 0x1d, 0x33, 0xec,
  0x20, 0xc4, 0x37, 0x03, 0x0a, 0x20, 0xbb, 0x3b, 0xb8, 0x1f, 0x1f, 0x41, 0x3d, 0x20, 0x4a, 0x43,
  0x03, 0xb3, 0x20, 0x2d, 0x45, 0x80, 0x21, 0x00, 0x46, 0xec, 0x22, 0x00, 0x46, 0x03, 0x00, 0x25,
  0xf6, 0x45, 0x9f, 0x27, 0xa1, 0x43, 0x4d, 0x29, 0x7b, 0x40, 0x03, 0x80, 0x2a, 0xbd, 0x3e, 0x4d,
  0x2d, 0xf5, 0x3d, 0x00, 0x30, 0x09, 0x3e, 0x03, 0xae, 0x32, 0xf0, 0x3d, 0x7b, 0x35, 0xbd, 0x3e,
  0xae, 0x36, 0x7b, 0x40, 0x03, 0x5c, 0x38, 0xa1, 0x43, 0xfb, 0x3a, 0xf6, 0x45, 0x14, 0x3d, 0x00,
  0x46, 0x03, 0x7b, 0x3e, 0x00, 0x46, 0x48, 0x3f, 0x2d, 0x45, 0xbd, 0x3f, 0x4a, 0x43, 0x03, 0x43,
  0x40, 0x1f, 0x41, 0xf1, 0x3f, 0xbb, 0x3b, 0x0f, 0x3f, 0xc4, 0x37, 0x03, 0x05, 0x3e, 0x1d, 0x33,
  0x1a, 0x3c, 0x8c, 0x2f, 0x0a, 0x3a, 0x72, 0x2e, 0x03, 0xe6, 0x38, 0xd3, 0x2d, 0xf6, 0x37, 0xd8,
  0x2d, 0x1f, 0x37, 0x72, 0x2e, 0x03, 0x0f, 0x36, 0x35, 0x2f, 0xdc, 0x33, 0x02, 0x30, 0x00, 0x30,
  0x02, 0x30, 0x03, 0x1f, 0x2c, 0x02, 0x30, 0xec, 0x29, 0x35, 0x2f, 0xdc, 0x28, 0x72, 0x2e, 0x05,
  0x02, 0x1e, 0x02, 0x1e, 0x02, 0x00, 0x00, 0x8f, 0x27, 0x01, 0x2e, 0x06, 0x0f, 0x28, 0x04, 0x34,
  0x01, 0x0a, 0x2a, 0x02, 0x05, 0x36, 0x01, 0x05, 0x2c, 0x02, 0x06, 0x38, 0x01, 0x0a, 0x2a, 0x02,
  0x07, 0x3a, 0x01, 0x0f, 0x28, 0x02, 0x06, 0x38, 0x01, 0x14, 0x26, 0x02, 0x05, 0x36, 0x01, 0x0f,
  0x28, 0x06, 0xf1, 0x36, 0x05, 0x36, 0x03, 0x7b, 0x37, 0x05, 0x36, 0xec, 0x37, 0x76, 0x36, 0xec,
  0x37, 0x06, 0x37, 0x05, 0x01, 0xfd, 0x00, 0xfd, 0x00, 0x00, 0x00, 0xf1, 0x35, 0x06, 0x37, 0x03,
  0xf1, 0x35, 0x76, 0x36, 0x61, 0x36, 0x05, 0x36, 0xf1, 0x36, 0x05, 0x36, 0x06, 0xf6, 0x34, 0x06,
  0x38, 0x03, 0x80, 0x35, 0x06, 0x38, 0xf1, 0x35, 0x77, 0x38, 0xf1, 0x35, 0x07, 0x39, 0x05, 0x01,
  0xfd, 0x00, 0xfd, 0x00, 0x00, 0x00, 0xf6, 0x33, 0x07, 0x39, 0x03, 0xf6, 0x33, 0x77, 0x38, 0x66,
  0x34, 0x06, 0x38, 0xf6, 0x34, 0x06, 0x38, 0x06, 0xec, 0x38, 0x06, 0x38, 0x03, 0x76, 0x39, 0x06,
  0x38, 0xe6, 0x39, 0x77, 0x38, 0xe6, 0x39, 0x07, 0x39, 0x05, 0x01, 0xfd, 0x00, 0xfd, 0x00, 0x00,
  0x00, 0xec, 0x37, 0x07, 0x39, 0x03, 0xec, 0x37, 0x77, 0x38, 0x5c, 0x38, 0x06, 0x38, 0xec, 0x38,
  0x06, 0x38, 0x06, 0xf1, 0x36, 0x07, 0x3a, 0x03, 0x7b, 0x37, 0x07, 0x3a, 0xec, 0x37, 0x78, 0x3a,
  0xec, 0x37, 0x08, 0x3b, 0x05, 0x01, 0xfd, 0x00, 0xfd, 0x00, 0x00, 0x00, 0xf1, 0x35, 0x08, 0x3b,
  0x03, 0xf1, 0x35, 0x78, 0x3a, 0x61, 0x36, 0x07, 0x3a, 0xf1, 0x36, 0x07, 0x3a, 0x06, 0x00
};

/*
 
  .tvg  
  image/tinyvg
  unit is 1/96 dpi

  file is:
        HEADER
        Color Lookup Table
        Command
        Command
        ...
        End of File

*/


namespace tvg
{
  typedef struct header
  {
    uint8_t magic[2];           // 0,1: { 0x72, 0x56 }
    uint8_t version;            // 2: must be 1
                                
                                // -> ccbbaaaa
    uint8_t scale;              // 3:4 (a)
    uint8_t color_encoding;     // 3:2 (b)  
    uint8_t coord_range;        // 3:2 (c)
                                // coord range -> 0=u16, 1=u8, 2=u32

    uint32_t width;             // u8, u16 or u32
    uint32_t height;            // u8, u16 or u32
    uint32_t color_count;       // VarUInt

  } header_t;

  typedef struct clut
  {

  } clut_t;

  typedef struct command
  {
    
  } command_t;

  typedef struct asset
  {
    header_t header;
    clut_t clut;
    std::vector<command_t*> command;
  } asset_t;


  bool Asset::load(const uint8_t* stream)
  {
    loaded = false;

    // TV version 1?
    if (!(stream[0] == 0x72 && stream[1] == 0x56 && stream[2] == 0x01))
      return false;

    scale = stream[3] & 0b00001111;     // number of fractional bits in Unit value
    color_encoding = (stream[3] & 0b00110000) >> 4;
    coord_range = (stream[3] & 0b11000000) >> 6;

    // now we can read Coords and VarUInts ---------------

    stream += 4;    // where the fun begins

    width = readUnitUnscaled(stream);
    height = readUnitUnscaled(stream);
    color_count = readVarUInt(stream);

    // read the color table
    readColortable(stream);

    // read the commands 
    while (readCommand(stream));

    loaded = true;
    return true;
  }

  Asset::~Asset()
  {
    delete[] colors;
  }

  Unit Asset::readUnitUnscaled(const uint8_t*& stream)
  {
    int32_t result = 0;
    switch (coord_range)
    {
      case 0:
        result = *reinterpret_cast<const int16_t*>(stream);
        stream += sizeof(int16_t);
        break;
      case 1:
        // s8
        result = *reinterpret_cast<const int8_t*>(stream);
        stream++;
        break;
      case 2:
        // s32

        result = result = *reinterpret_cast<const int32_t*>(stream);
        stream += sizeof(int32_t);
        break;
      default:
        // throw
        break;
    }
    return float(result);
  }

  Unit Asset::readUnit(const uint8_t*& stream)
  {
    int32_t result = 0;
    switch (coord_range)
    {
    case 0:
      result = *reinterpret_cast<const int16_t*>(stream);
      stream += sizeof(int16_t);
      break;
    case 1:
      // s8
      result = *reinterpret_cast<const int8_t*>(stream);
      stream++;
      break;
    case 2:
      // s32

      result = result = *reinterpret_cast<const int32_t*>(stream);
      stream += sizeof(int32_t);
      break;
    default:
      // throw
      break;
    }

    float f = float(result) / float(1 << this->scale);
    return f;
  }

  uint32_t Asset::readVarUInt(const uint8_t*& stream)
  {
    uint32_t count = 0;
    uint32_t result = 0;
    while (true) {
      uint8_t byte = *stream++;
      uint32_t val = (byte & 0x7F) << (7 * count);
      result |= val;
      if ((byte & 0x80) == 0)
        break;
      count++;
    }
    return result;
  }

  void Asset::readColortable(const uint8_t*& stream)
  {
    delete[] colors;
    colors = new uint32_t[color_count];

    for (decltype(color_count) i = 0; i < color_count; ++i)
    {
      colors[i] = readColorEntry(stream);
    }
  }

  uint32_t Asset::readColorEntry(const uint8_t*& stream)
  {
    // ARGB
    uint32_t result = 0;

    switch (color_encoding)
    {
    case 0:
        // spec defines entry as RGBA8888
      result |= (*stream++) << 16;
      result |= (*stream++) << 8;
      result |= (*stream++);
      result |= (*stream++) << 24;
      break;
    case 1:
      // spec defines entry as RGB565, find vImageConvert_RGB565toARGB8888 from the iOS Accelerate Framework
      {
      uint32_t w = readu16(stream); // expand to u32 to have room for calculations
      result |= ((((w >> 11) & 31) * 255 + 15) / 31) << 16; // red
      result |= ((((w >> 5) & 63) * 255 + 31) / 63) << 8; // green
      result |= ((( w & 31) * 255 + 15) / 31); // blue;
      }
      break;
    case 2:
      {
        auto r = *reinterpret_cast<const float*>(stream); stream += sizeof(float);
        auto g = *reinterpret_cast<const float*>(stream); stream += sizeof(float);
        auto b = *reinterpret_cast<const float*>(stream); stream += sizeof(float);
        auto a = *reinterpret_cast<const float*>(stream); stream += sizeof(float);

        result |= ((int)(r * 255.f)) << 16;
        result |= ((int)(g * 255.f)) << 8;
        result |= ((int)(b * 255.f)) ;
        result |= ((int)(a * 255.f)) << 24;
      }
      break;
    default:
      // throw?
      break;
    }

    return result;
  }

  bool Asset::readCommand(const uint8_t*& stream)
  {
    auto b = *stream++;
    uint8_t commandindex = b & 0x3F;
    uint8_t prim_style = (b >> 6) & 0x3;
    switch (commandindex)
    {
      case 0:
        // eod
        // prim_style should be 0
        // from the spec:
        // Every byte after this command is considered not part of the TinyVG data and can be used 
        // for other purposes like metadata or similar.
        return false; // returning false means: parsing ended, end of document reached
        break;
      case 1:
        // fill polygon
        {
          auto cmd = new FillPolygon();
          cmd->index = commandindex;
          auto pointcount = readVarUInt(stream) + 1;
          cmd->prim_style= readStyle(prim_style, stream);
          cmd->points.reserve(pointcount);
          for (decltype(pointcount) i = 0; i < pointcount; ++i)
          {
            cmd->points.push_back(readPoint(stream));
          }
          commands.push_back(std::unique_ptr<Command>(cmd));
        }
        break;
      case 2:
        // fill rectangles
        {
          auto cmd = new FillRectangles();
          cmd->index = commandindex;
          auto rectanglecount = readVarUInt(stream)+1;
          cmd->prim_style = readStyle(prim_style,stream);
          cmd->rectangles.reserve(rectanglecount);
          for (decltype(rectanglecount) i = 0; i < rectanglecount; ++i)
          {
            cmd->rectangles.push_back(readRectangle(stream));
          }
          commands.push_back(std::unique_ptr<Command>(cmd));
        }
        break;
      case 3:
        // fill path
        {
          auto cmd = new FillPath();
          cmd->index = commandindex;
          auto seg_count = readVarUInt(stream) + 1;
          cmd->prim_style = readStyle(prim_style, stream);
          cmd->path = readPath(seg_count, stream);
          commands.push_back(std::unique_ptr<Command>(cmd));
        }
        break;
      case 4:
        // draw lines
        {
          auto cmd = new DrawLines();
          cmd->index = commandindex;
          auto line_count = readVarUInt(stream) + 1;
          cmd->prim_style = readStyle(prim_style, stream);
          cmd->linewidth = readUnit(stream);
          cmd->lines.reserve(line_count);
          for (decltype(line_count) i = 0; i < line_count; ++i)
          {
            auto start = readPoint(stream);
            auto end = readPoint(stream);
            cmd->lines.push_back({ start,end });
          }
          commands.push_back(std::unique_ptr<Command>(cmd));
        }
        break;
      case 5:
        // draw line loop
        {
          auto cmd = new DrawLineLoop();
          cmd->index = commandindex;
          auto point_count = readVarUInt(stream) + 1;
          cmd->points.reserve(point_count);
          cmd->prim_style = readStyle(prim_style, stream);
          cmd->linewidth = readUnit(stream);
          for (decltype(point_count) i = 0; i < point_count; ++i)
          {
            cmd->points.push_back(readPoint(stream));
          }
          commands.push_back(std::unique_ptr<Command>(cmd));
        }
        break;
      case 6:
        // draw line strip
        {
          auto cmd = new DrawLineStrip();
          cmd->index = commandindex;
          auto point_count = readVarUInt(stream) + 1;
          cmd->points.reserve(point_count);
          cmd->prim_style = readStyle(prim_style, stream);
          cmd->linewidth = readUnit(stream);
          for (decltype(point_count) i = 0; i < point_count; ++i)
          {
            cmd->points.push_back(readPoint(stream));
          }
          commands.push_back(std::unique_ptr<Command>(cmd));
        }
        break;
      case 7:
        // draw line path
        {
          auto cmd = new DrawLinePath();
          cmd->index = commandindex;
          auto seg_count = readVarUInt(stream) + 1;
          cmd->prim_style = readStyle(prim_style, stream);
          cmd->linewidth = readUnit(stream);
          cmd->path = readPath(seg_count, stream);
          commands.push_back(std::unique_ptr<Command>(cmd));
        }
        break;
      case 8:
        // outline fill polygon
        {
          auto cmd = new OutlineFillPolygon();
          cmd->index = commandindex;

          auto b = *stream++;
          uint8_t pointcount = (b & 0x3F)+1;
          uint8_t sec_style = (b >> 6) & 0x3;

          cmd->prim_style = readStyle(prim_style, stream);
          cmd->sec_style = readStyle(sec_style, stream);
          cmd->linewdith = readUnit(stream);
          cmd->points.reserve(pointcount);
          for (decltype(pointcount) i = 0; i < pointcount; ++i)
          {
            cmd->points.push_back(readPoint(stream));
          }
          commands.push_back(std::unique_ptr<Command>(cmd));
        }
        break;
      case 9:
        // outline fill rectangles
        {
          auto cmd = new OutlineFillRectangles();
          cmd->index = commandindex;
          auto b = *stream++;
          uint8_t rectanglecount = (b & 0x3F) + 1;
          uint8_t sec_style = (b >> 6) & 0x3;
          cmd->prim_style = readStyle(prim_style, stream);
          cmd->sec_style = readStyle(sec_style, stream);
          cmd->linewdith = readUnit(stream);
          cmd->rectangles.reserve(rectanglecount);
          for (decltype(rectanglecount) i = 0; i < rectanglecount; ++i)
          {
            cmd->rectangles.push_back(readRectangle(stream));
          }
          commands.push_back(std::unique_ptr<Command>(cmd));
        }
        break;
      case 10:
        // outline fill path
                // outline fill rectangles
        {
          auto cmd = new OutlineFillPath();
          cmd->index = commandindex;
          auto b = *stream++;
          uint8_t seg_count = (b & 0x3F) + 1;
          uint8_t sec_style = (b >> 6) & 0x3;
          cmd->prim_style = readStyle(prim_style, stream);
          cmd->sec_style = readStyle(sec_style, stream);
          cmd->linewdith = readUnit(stream);
          cmd->path = readPath(seg_count, stream);
          commands.push_back(std::unique_ptr<Command>(cmd));
        }
        break;
      case 11:
        // informal spec:
      /*
      * command-name:  "tag"
            command-index: 11
            layout:
              length: varuint
              data:   [length]u8
      */
        break;
      default:
        // unknown thing, but can't read ahead
        // throw?
        return false;
        break;
    }
    return true;
  }

  Style Asset::readStyle(uint8_t kind, const uint8_t*& stream)
  {
    Style result;
    switch (kind)
    {
      case 0:
        result.type.flat.color_index = readVarUInt(stream);
        break;
      case 2:
        result.linear = false;
        [[fallthrough]];
      case 1:
        result.flat = false;
        result.type.gradient.point_0 = readPoint(stream);
        result.type.gradient.point_1 = readPoint(stream);
        result.type.gradient.color_index_0 = readVarUInt(stream);
        result.type.gradient.color_index_1 = readVarUInt(stream);
        break;
      default:
        break;
    }
    return result;
  }

  Point Asset::readPoint(const uint8_t*& stream)
  {
    Point result;
    result.x = readUnit(stream);
    result.y = readUnit(stream);
    return result;
  }

  Rectangle Asset::readRectangle(const uint8_t*& stream)
  {
    Rectangle result;
    result.x = readUnit(stream);
    result.y = readUnit(stream);
    result.w = readUnit(stream);
    result.h = readUnit(stream);
    return result;
  }

  Path Asset::readPath(uint32_t segment_count, const uint8_t*& stream)
  {
    Path path;
    path.segments.resize(segment_count);

    uint32_t segment_lengths[1024];
    if (segment_count > 1024) {
      // throw?
      return Path();
    }

    uint32_t totalnodes = 0;
    for (uint32_t i = 0; i < segment_count; ++i) {
      auto l = readVarUInt(stream) + 1;
      segment_lengths[i] = l;
      totalnodes += l;
    }


    // read all segments and for each one the segment_lengts[segment] number of commands
    for (uint32_t i = 0; i < segment_count; ++i) {

      auto& s = path.segments[i];

      // first read the starting point
      s.p0 = readPoint(stream);

      auto num_nodes = segment_lengths[i];
      
      // read the segment dommands
      s.node.resize(num_nodes);

      for (uint32_t j = 0; j < num_nodes; ++j) {

        // command instruction and line width, then payload
        auto& node = s.node[j];

        uint8_t p = *stream++;

        node.type = p & 0x7; // u3  (followed by u1 padding)
        bool has_linewidth = (p & 0x10); // u1  (followed by u3 padding)
        if (has_linewidth)
        {
          node.line_width = readUnit(stream);
        }

        // read type specific data
        auto& n = node.data;

        switch (node.type)
        {
          case 0: // line
            n.line.p2 = readPoint(stream);
            break;
          case 1: // horizontal line
            n.horz.pos = readUnit(stream);
            break;
          case 2: // vertical line
            n.vert.pos = readUnit(stream);
            break;
          case 3: // cubic bezier
            n.bezier.control0 = readPoint(stream);
            n.bezier.control1 = readPoint(stream);
            n.bezier.point_1 = readPoint(stream);
            break;
          case 4: // arc circle
            {
              auto b = *stream++;
              n.arc.large_arc = b & 0x01;
              n.arc.sweep = b & 0x02;
              n.arc.radius = readUnit(stream);
              n.arc.target = readPoint(stream);
            }
            break;
          case 5: // arc ellipse
            {
              auto b = *stream++;
              n.ellipse.large_arc = b & 0x01;
              n.ellipse.sweep = b & 0x02;
              n.ellipse.radius_x = readUnit(stream);
              n.ellipse.radius_y = readUnit(stream);
              n.ellipse.rotation = readUnit(stream);
              n.ellipse.target = readPoint(stream);
            }
            break;
          case 6: // close path
            // this is the end.... no data encoded, but actually, this must be the last one, if present.
            // assert(j + 1 == num_nodes);
            s.closed = true;
            break;
          case 7: // quadratic bezier
            n.quad.control = readPoint(stream);
            n.quad.point_1 = readPoint(stream);
            break;
        }
      }
    }
    
    return path;
  }

}



int main(void)
{
  std::cout << "hello" << std::endl;
  tvg::Asset k;
  k.load(everything);
  k.load(app_icon);
  return 0;
}